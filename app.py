"""–ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫"""
import streamlit as st
import pandas as pd
import numpy as np
from catboost import CatBoostClassifier
from sklearn.preprocessing import StandardScaler
from src.preproccesing import dummy_encode


DATA_PATH = '/home/nfrvnikita/miocard/data/heart.csv'
MODEL_PATH = '/home/nfrvnikita/miocard/models/catboost_model'

st.set_page_config(layout='wide',
                   page_title='–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –°–°–ó',
                   page_icon='üè•',
                   initial_sidebar_state="expanded")
st.write('# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π')
st.sidebar.title('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:')

with st.expander("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –°–°–ó", expanded=False):
    st.write('- –°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è (–°–°–ó) –∑–∞–Ω–∏–º–∞—é—Ç –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ –ø—Ä–∏—á–∏–Ω —Å–º–µ—Ä—Ç–∏ –≤–æ \
        –≤—Å–µ–º –º–∏—Ä–µ, –µ–∂–µ–≥–æ–¥–Ω–æ —É–Ω–æ—Å—è –∂–∏–∑–Ω–∏ 17,9 –º–ª–Ω. —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 31% –≤—Å–µ—Ö —Å–º–µ—Ä—Ç–µ–π –≤ –º–∏—Ä–µ.')
    st.write('- –õ—é–¥–∏ —Å —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–º–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–º —Ä–∏—Å–∫–æ–º \
        (–∏–∑-–∑–∞ –Ω–∞–ª–∏—á–∏—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞, —Ç–∞–∫–∏—Ö –∫–∞–∫ –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è, –¥–∏–∞–±–µ—Ç, \
        –≥–∏–ø–µ—Ä–ª–∏–ø–∏–¥–µ–º–∏—è –∏–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ) –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ —Ä–∞–Ω–Ω–µ–º –≤—ã—è–≤–ª–µ–Ω–∏–∏ –∏ –ª–µ—á–µ–Ω–∏–∏, \
        –∏ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à—É—é –ø–æ–º–æ—â—å.')


def user_input_features() -> pd.DataFrame:
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.

    Returns:
        pd.DataFrame: –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    age = st.sidebar.slider('–í–æ–∑—Ä–∞—Å—Ç', 0, 130, 25)
    sex = st.sidebar.selectbox('–ü–æ–ª', ('M', 'F'))
    chest_pain_type = st.sidebar.selectbox('–¢–∏–ø –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏', ('TA', 'ATA', 'NAP', 'ASY'))
    resting_bp = st.sidebar.slider('–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–∫–æ–µ', 0, 200, 25)
    cholesterol = st.sidebar.slider('–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω', 0, 400, 25)
    fasting_bs = st.sidebar.select_slider('–î–∏–∞–±–µ—Ç', ('N', 'Y'))
    resting_ecg = st.sidebar.selectbox('–≠–ö–ì –≤ –ø–æ–∫–æ–µ', ('Normal', 'ST', 'LVH'))
    max_hr = st.sidebar.slider('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ', 0, 250, 25)
    exercise_angina = st.sidebar.slider('–°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è, –≤—ã–∑–≤–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–æ–π', 0.1, 2.5, 0.2)
    oldpeak = st.sidebar.slider('–ò—à–µ–º–∏—á–µ—Å–∫–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ ST', 0.1, 10.0, 2.5)
    st_slope = st.sidebar.selectbox('–ù–∞–∫–ª–æ–Ω –ø–∏–∫–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ ST', ('Up', 'Flat', 'Down'))

    features = {
        'Age': age,
        'Sex': sex,
        'ChestPainType': chest_pain_type,
        'RestingBP': resting_bp,
        'Cholesterol': cholesterol,
        'FastingBS': fasting_bs,
        'RestingECG': resting_ecg,
        'MaxHR': max_hr,
        'ExerciseAngina': exercise_angina,
        'Oldpeak': oldpeak,
        'ST_Slope': st_slope
    }

    return pd.DataFrame(data=features, index=[0])


user_data = user_input_features()

st.subheader('–í–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
st.write(user_data)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
raw_data = pd.read_csv(DATA_PATH)
data = raw_data.drop(columns=['HeartDisease'])
concat_data = pd.concat([user_data, data], axis=0)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
list_columns = list(concat_data.columns)

num_features = []
cat_features = []

for col in list_columns:
    if len(concat_data[col].unique()) > 6:
        num_features.append(col)
    else:
        cat_features.append(col)

final_data = dummy_encode(concat_data, cat_features)
final_data[num_features] = StandardScaler().fit_transform(final_data[num_features])
user_final_data = final_data[:1]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
catboost = CatBoostClassifier()
loaded_model = catboost.load_model(MODEL_PATH)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞
prediction = loaded_model.predict(user_final_data)
prediction_proba = loaded_model.predict_proba(user_final_data)


st.subheader('–ü—Ä–æ–≥–Ω–æ–∑')
heart_disease = np.array([0, 1])
st.write(heart_disease[prediction])

st.subheader('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞')
st.write(prediction_proba)
